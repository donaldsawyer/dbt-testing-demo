version: 2

models:
  - name: slv_airport
    config:
      contract:
        enforced: true
    tests:
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
            compare_model: source('demo_source', 'airport_code')
            compare_row_condition: "code != 'ZZZ'"
    columns:
      - name: code
        data_type: character varying(8)
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_values_to_not_be_in_set:
              value_set: ['ZZZ', 'zzz']
              quote_values: true # (Optional. Default is 'true'.)
      - name: name
        data_type: character varying(128)
        tests:
          - not_null
      - name: city  # Need a test for "does not have a comma"
        data_type: character varying(32)
      - name: state_country
        data_type: character varying(8) # NOTE: length is NOT ENFORCED
  - name: slv_carrier
    config: 
      contract:
        enforced: true
    tests:
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
            compare_model: source('demo_source', 'carrier_code')
    columns:
      - name: code
        data_type: character varying(8)
        tests:
          - not_null
      - name: name
        data_type: character varying(128)
        tests:
          - not_null
      - name: effectiveFromYear
        data_type: integer
        # tests for year ranges of 1900, 4 digits
      - name: effectiveToYear
        data_type: integer
        # tests for year ranges of 4 digits, 9999
      - name: originalDescription
        data_type: character varying (128)
  - name: slv_flight
    tests:
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
          compare_model: ref("flight_data")
          # group_by: [col1, col2] # (Optional)
          # compare_group_by: [col1, col2] # (Optional)
          # factor: 1 # (Optional)
          # row_condition: "id is not null" # (Optional)
          # compare_row_condition: "id is not null" # (Optional)
    config: 
      contract:
        enforced: true
    columns:
      - name: year
        data_type: smallint
        tests:
          - not_null
          # tests: value list
      - name: month
        data_type: smallint
        tests:
          - not_null
      - name: dayOfMonth
        data_type: smallint
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:  # this can be made for specific months with 30, 31, 28/29 days
              min_value: 1
              max_value: 29
              row_condition: "month = 2"
          - dbt_expectations.expect_column_values_to_be_between:  # this can be made for specific months with 30, 31, 28/29 days
              min_value: 1
              max_value: 30
              row_condition: "month IN (4, 6, 9, 11)"
          - dbt_expectations.expect_column_values_to_be_between:  # this can be made for specific months with 30, 31, 28/29 days
              min_value: 1
              max_value: 31
              row_condition: "month IN (1, 3, 5, 7, 8, 10, 12)"
      - name: flightDate
        data_type: character varying (10)
        tests:
          - not_null
          - dbt_expectations.expect_column_value_lengths_to_equal:
              value: 10
      - name: uniqueCarrier
        data_type: character varying (3)
        tests:
          - not_null
      - name: airlineId
        data_type: integer
        tests:
          - not_null
      - name: carrier
        data_type: character varying (3)
        tests:
          - not_null
          - relationships:
              to: ref('slv_carrier')
              field: code
      - name: tailNumber
        data_type: character varying (10)
        tests:
          - not_null
      - name: flightNumber
        data_type: integer
        tests:
          - not_null
      - name: originAirportId
        data_type: integer
        tests:
          - not_null
      - name: originAirportSequenceId
        data_type: integer
        tests:
          - not_null
      - name: origin
        data_type: character varying (3)
        tests:
          - not_null
          - relationships:
              to: ref('slv_airport')
              field: code
      - name: destinationAirportId
        data_type: integer
        tests:
          - not_null
      - name: destinationAirportSequenceId
        data_type: integer
        tests:
          - not_null
      - name: destination
        data_type: character varying (3)
        tests:
          - not_null
          - relationships:
              to: ref('slv_airport')
              field: code
      - name: departureDelayMinutes
        data_type: integer
        tests: # DIFFERENT NULL TEST - CONDITIONAL
          # - not_null
          - dbt_expectations.expect_column_values_to_not_be_null:
              row_condition: "cancelledFlag = FALSE AND divertedFlag = FALSE"
      - name: arrivalDelayMinutes
        data_type: integer
        tests:
          # - not_null
          - dbt_expectations.expect_column_values_to_not_be_null:
              row_condition: "cancelledFlag = FALSE AND divertedFlag = FALSE"
      - name: cancelledFlag
        data_type: boolean # TEST SOURCE TO MAKE SURE IT'S ONLY 1 OR 0
        tests:
          - not_null
      - name: divertedFlag
        data_type: boolean # TEST SOURCE TO MAKE SURE IT'S ONLY 1 OR 0
        tests:
          - not_null
      - name: distanceMiles
        data_type: integer
        tests:
          - not_null
